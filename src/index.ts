import { app, BrowserWindow, ipcMain, Menu, MenuItem, screen } from "electron";
import {
  configuration,
  devMode,
  TRACKING_STATUS,
  updateConfiguration,
} from "./config/config";
import { IPC_FUNCTION_KEYS } from "./constants/ipcFunctionKeys";
import { startServer } from "./server/server";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const TAG = "index.ts ";
// export var configuration = defaultConfiguration;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}
let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  console.log("MAIN_WINDOW_WEBPACK_ENTRY, ", MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (devMode) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

const createMenu = (): void => {
  const menu = new Menu();
  menu.append(
    new MenuItem({
      label: "New Menu",
      submenu: [
        {
          label: "Start tracking",
          accelerator: "Return",
          click: () => {
            console.log("Turned on tracking!");
            configuration.trackingStatus = TRACKING_STATUS.ON;
            configuration.mousePositionSequence = [];
            mainWindow.webContents.send(
              IPC_FUNCTION_KEYS.HANDLE_CONFIGURATION_UPDATE,
              configuration
            );
          },
        },
        {
          label: "Stop tracking",
          accelerator: "Escape",
          click: () => {
            console.log("Turned off tracking!");
            configuration.trackingStatus = TRACKING_STATUS.OFF;
            mainWindow.webContents.send(
              IPC_FUNCTION_KEYS.HANDLE_CONFIGURATION_UPDATE,
              configuration
            );
          },
        },
      ],
    })
  );
  Menu.setApplicationMenu(menu);
};
createMenu();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  //expose functions to UI
  ipcMain.on(
    IPC_FUNCTION_KEYS.UPDATE_APP_CONFIGURATION,
    (_, newConfiguration: typeof configuration) => {
      console.log(
        'main received renderer"s request to change config: ',
        newConfiguration
      );
      updateConfiguration(newConfiguration);

      // configuration = { ...defaultConfiguration, ...newConfiguration };
    }
  );
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;
  console.log(TAG, "setting screen size to width:", width, "height:", height);

  configuration.screenWidth = width;
  configuration.screenHeight = height;

  createWindow();
  startServer();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

//required for ts to recognize ipc functions in react code
declare global {
  interface Window {
    electronAPI?: {
      openSettings: () => void;
      handleConfigurationUpdate: (configuration: any) => void;
      updateConfiguration: (configuration: any) => void;
    };
  }
}
